buildscript {
    repositories {
        maven {
            name 'MixinGradle'
            url 'https://repo.spongepowered.org/repository/maven-public'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        if (project.use_mixins.toBoolean()) {
            classpath 'org.spongepowered:mixingradle:0.7.32'
        }
    }
}

plugins {
    id 'wtf.gofancy.fancygradle' version '1.+'
}

apply plugin: 'net.minecraftforge.gradle'
// apply plugin: 'maven-publish'
if (project.use_mixins.toBoolean()) {
    apply plugin: 'org.spongepowered.mixin'
}

version = "${mod_version}"
group = project.maven_group
archivesBaseName = "${project.archives_base_name}-1.12.2"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

if (project.use_lntellij_idea.toBoolean()) {
    apply {
        plugin 'java'
        plugin 'idea'
    }


    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

if (project.use_eclipse.toBoolean()) {
    apply {
        plugin 'java'
        plugin 'eclipse'
    }


    eclipse {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

minecraft {

    mappings channel: 'stable', version: '39-1.12'

    if (project.has_access_transformer.toBoolean()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run/client')
            if (project.use_coremod.toBoolean()) {
                jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
            }
            if (project.use_mixins.toBoolean()) {
                jvmArg '-Dmixin.hotSwap=true'
                jvmArg '-Dmixin.checks.interfaces=true'
                jvmArg '-Dmixin.debug=true'
            }
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            workingDirectory project.file('run/server')
            if (project.use_coremod.toBoolean()) {
                jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
            }
            if (project.use_mixins.toBoolean()) {
                jvmArg '-Dmixin.hotSwap=true'
                jvmArg '-Dmixin.checks.interfaces=true'
            }
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                '${archives_base_name}' {
                    source sourceSets.main
                }
            }
        }
    }
}


repositories {
    maven {
        url = 'https://maven.cleanroommc.com'
    }
    maven {
        url = 'https://repo.spongepowered.org/maven'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.1.34'

    if (project.use_mixins.toBoolean()) {
        compileOnly fg.deobf('zone.rong:mixinbooter:5.0')
        runtimeOnly 'zone.rong:mixinbooter:5.0'
    }
}

fancyGradle {
    patches {
        resources
        coremods
        asm
    }
}


// Create deobf dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Create API library jar
task apiZip(type: Jar) {
    duplicatesStrategy = 'include'
    from(sourceSets.main.java) {
        include "baubles/api/**"
    }
    from(sourceSets.main.output) {
        include "baubles/api/**"
    }

    classifier = 'api'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

sourceSets {
    main {
        if (project.use_mixins.toBoolean()) {
            ext.refMap = 'mixins.' + project.archives_base_name + '.refmap.json'
        }

        java {
            srcDirs = ["src/main/java"]
        }

        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }

    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }

    // at compile time, put resources in same directories as classes
    main.output.setResourcesDir(main.java.outputDir)
}

jar {
    manifest {
        // noinspection GroovyAssignabilityCheck
        def attribute_map = [:]
        if (project.use_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == 'build'
            }
        }
        if (project.use_mixins.toBoolean()) {
            attribute_map['TweakClass'] = 'org.spongepowered.asm.launch.MixinTweaker'
        }
        attributes(attribute_map)
    }
}

artifacts {
    archives deobfJar
    archives apiZip
    archives sourcesJar
}

jar.finalizedBy('reobfJar')

processResources {
    // required to allow file expansion later
    duplicatesStrategy = 'include'

    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


